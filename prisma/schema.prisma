// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  verified           Boolean   @default(false)
  verificationToken  Int
  passwordResetToken Int       @default(0)
  name               String
  avatarUrl          String?
  created            DateTime  @default(now())
  Session            Session[]

  Newsletter  Newsletter[]
  Unsubscribe Unsubscribe[]
}

model Session {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique @default(cuid())
  expires DateTime
  valid   Boolean  @default(true)
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Newsletter {
  id         String       @id @default(uuid())
  title      String
  interval   IntervalType
  time       String
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  components Component[]
  active     Boolean      @default(true)
  token      String       @unique @default(cuid())

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Unsubscribe Unsubscribe[]
}

model Unsubscribe {
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  newsletterId String
  reason       String
  feedback     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Component {
  id           String        @id @default(uuid())
  type         ComponentType
  order        Int
  newsletter   Newsletter    @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  newsletterId String

  weather WeatherParams?
  crypto  CryptoParams?
  quote   QuoteParams?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum IntervalType {
  daily
  weekly
  monthly
}

enum ComponentType {
  weather
  crypto
  quote
}

model WeatherParams {
  id          String    @id @default(uuid())
  city        String
  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  componentId String    @unique
}

model CryptoParams {
  id          String    @id @default(uuid())
  currency    String
  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  componentId String    @unique
}

model QuoteParams {
  id          String    @id @default(uuid())
  quote       String
  author      String
  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  componentId String    @unique
}
